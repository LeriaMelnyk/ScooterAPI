// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScooterDAL.Data;

#nullable disable

namespace Scooter.DAL.Migrations
{
    [DbContext(typeof(ScooterDbContext))]
    [Migration("20250627225859_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ScooterDAL.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("TripId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TripId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Great ride!",
                            CreatedAt = new DateTime(2025, 6, 24, 22, 58, 58, 536, DateTimeKind.Utc).AddTicks(9600),
                            Rating = 5,
                            TripId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Smooth and easy.",
                            CreatedAt = new DateTime(2025, 6, 25, 22, 58, 58, 536, DateTimeKind.Utc).AddTicks(9738),
                            Rating = 4,
                            TripId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Loved it!",
                            CreatedAt = new DateTime(2025, 6, 26, 22, 58, 58, 536, DateTimeKind.Utc).AddTicks(9741),
                            Rating = 5,
                            TripId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Okay ride.",
                            CreatedAt = new DateTime(2025, 6, 27, 18, 58, 58, 536, DateTimeKind.Utc).AddTicks(9743),
                            Rating = 3,
                            TripId = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Very good!",
                            CreatedAt = new DateTime(2025, 6, 27, 21, 58, 58, 536, DateTimeKind.Utc).AddTicks(9745),
                            Rating = 4,
                            TripId = 5,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("ScooterDAL.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TripId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TripId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 3.50m,
                            PaidAt = new DateTime(2025, 6, 24, 22, 58, 58, 536, DateTimeKind.Utc).AddTicks(8456),
                            PaymentMethod = "Card",
                            TripId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 4.00m,
                            PaidAt = new DateTime(2025, 6, 25, 22, 58, 58, 536, DateTimeKind.Utc).AddTicks(8595),
                            PaymentMethod = "PayPal",
                            TripId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Amount = 2.80m,
                            PaidAt = new DateTime(2025, 6, 26, 22, 58, 58, 536, DateTimeKind.Utc).AddTicks(8598),
                            PaymentMethod = "Card",
                            TripId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Amount = 5.20m,
                            PaidAt = new DateTime(2025, 6, 27, 18, 58, 58, 536, DateTimeKind.Utc).AddTicks(8600),
                            PaymentMethod = "Card",
                            TripId = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Amount = 4.70m,
                            PaidAt = new DateTime(2025, 6, 27, 21, 58, 58, 536, DateTimeKind.Utc).AddTicks(8698),
                            PaymentMethod = "PayPal",
                            TripId = 5,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("ScooterDAL.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("DistanceKm")
                        .HasColumnType("double precision");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DistanceKm = 2.5,
                            EndLocation = "Main Square",
                            EndTime = new DateTime(2025, 6, 24, 23, 13, 58, 536, DateTimeKind.Utc).AddTicks(6384),
                            StartLocation = "Center Park",
                            StartTime = new DateTime(2025, 6, 24, 22, 58, 58, 536, DateTimeKind.Utc).AddTicks(6227),
                            TotalPrice = 3.50m,
                            UserId = 1,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            DistanceKm = 3.1000000000000001,
                            EndLocation = "Old Town",
                            EndTime = new DateTime(2025, 6, 25, 23, 18, 58, 536, DateTimeKind.Utc).AddTicks(7359),
                            StartLocation = "Main Street",
                            StartTime = new DateTime(2025, 6, 25, 22, 58, 58, 536, DateTimeKind.Utc).AddTicks(7357),
                            TotalPrice = 4.00m,
                            UserId = 2,
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 3,
                            DistanceKm = 1.8,
                            EndLocation = "River Side",
                            EndTime = new DateTime(2025, 6, 26, 23, 8, 58, 536, DateTimeKind.Utc).AddTicks(7365),
                            StartLocation = "Old Town",
                            StartTime = new DateTime(2025, 6, 26, 22, 58, 58, 536, DateTimeKind.Utc).AddTicks(7364),
                            TotalPrice = 2.80m,
                            UserId = 3,
                            VehicleId = 3
                        },
                        new
                        {
                            Id = 4,
                            DistanceKm = 4.2000000000000002,
                            EndLocation = "Depot",
                            EndTime = new DateTime(2025, 6, 27, 19, 28, 58, 536, DateTimeKind.Utc).AddTicks(7377),
                            StartLocation = "River Side",
                            StartTime = new DateTime(2025, 6, 27, 17, 58, 58, 536, DateTimeKind.Utc).AddTicks(7369),
                            TotalPrice = 5.20m,
                            UserId = 4,
                            VehicleId = 4
                        },
                        new
                        {
                            Id = 5,
                            DistanceKm = 3.6000000000000001,
                            EndLocation = "Center Park",
                            EndTime = new DateTime(2025, 6, 27, 22, 13, 58, 536, DateTimeKind.Utc).AddTicks(7381),
                            StartLocation = "Depot",
                            StartTime = new DateTime(2025, 6, 27, 20, 58, 58, 536, DateTimeKind.Utc).AddTicks(7380),
                            TotalPrice = 4.70m,
                            UserId = 5,
                            VehicleId = 5
                        });
                });

            modelBuilder.Entity("ScooterDAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 27, 22, 58, 58, 535, DateTimeKind.Utc).AddTicks(3916),
                            Email = "alice@example.com",
                            FullName = "Alice Johnson",
                            IsVerified = true,
                            PasswordHash = "hash1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 27, 22, 58, 58, 535, DateTimeKind.Utc).AddTicks(4110),
                            Email = "bob@example.com",
                            FullName = "Bob Smith",
                            IsVerified = false,
                            PasswordHash = "hash2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 27, 22, 58, 58, 535, DateTimeKind.Utc).AddTicks(4113),
                            Email = "charlie@example.com",
                            FullName = "Charlie Brown",
                            IsVerified = true,
                            PasswordHash = "hash3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 27, 22, 58, 58, 535, DateTimeKind.Utc).AddTicks(4115),
                            Email = "diana@example.com",
                            FullName = "Diana Prince",
                            IsVerified = true,
                            PasswordHash = "hash4"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 27, 22, 58, 58, 535, DateTimeKind.Utc).AddTicks(4117),
                            Email = "ethan@example.com",
                            FullName = "Ethan Hunt",
                            IsVerified = false,
                            PasswordHash = "hash5"
                        });
                });

            modelBuilder.Entity("ScooterDAL.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BatteryLevel")
                        .HasColumnType("integer");

                    b.Property<string>("CurrentLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastServiceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BatteryLevel = 85,
                            CurrentLocation = "Center Park",
                            IsAvailable = true,
                            LastServiceDate = new DateTime(2025, 6, 17, 22, 58, 58, 536, DateTimeKind.Utc).AddTicks(4837),
                            Model = "Xiaomi M365",
                            RegistrationNumber = "SC-001",
                            Type = "Scooter"
                        },
                        new
                        {
                            Id = 2,
                            BatteryLevel = 100,
                            CurrentLocation = "Main Street",
                            IsAvailable = true,
                            LastServiceDate = new DateTime(2025, 6, 7, 22, 58, 58, 536, DateTimeKind.Utc).AddTicks(5121),
                            Model = "Giant Escape",
                            RegistrationNumber = "BK-002",
                            Type = "Bike"
                        },
                        new
                        {
                            Id = 3,
                            BatteryLevel = 75,
                            CurrentLocation = "Old Town",
                            IsAvailable = true,
                            LastServiceDate = new DateTime(2025, 6, 22, 22, 58, 58, 536, DateTimeKind.Utc).AddTicks(5127),
                            Model = "Segway Ninebot",
                            RegistrationNumber = "SC-003",
                            Type = "Scooter"
                        },
                        new
                        {
                            Id = 4,
                            BatteryLevel = 100,
                            CurrentLocation = "River Side",
                            IsAvailable = true,
                            LastServiceDate = new DateTime(2025, 6, 12, 22, 58, 58, 536, DateTimeKind.Utc).AddTicks(5130),
                            Model = "Trek FX",
                            RegistrationNumber = "BK-004",
                            Type = "Bike"
                        },
                        new
                        {
                            Id = 5,
                            BatteryLevel = 45,
                            CurrentLocation = "Depot",
                            IsAvailable = false,
                            LastServiceDate = new DateTime(2025, 6, 25, 22, 58, 58, 536, DateTimeKind.Utc).AddTicks(5133),
                            Model = "E-Twow GT",
                            RegistrationNumber = "SC-005",
                            Type = "Scooter"
                        });
                });

            modelBuilder.Entity("ScooterDAL.Entities.Feedback", b =>
                {
                    b.HasOne("ScooterDAL.Entities.Trip", "Trip")
                        .WithOne("Feedback")
                        .HasForeignKey("ScooterDAL.Entities.Feedback", "TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScooterDAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScooterDAL.Entities.Payment", b =>
                {
                    b.HasOne("ScooterDAL.Entities.Trip", "Trip")
                        .WithOne("Payment")
                        .HasForeignKey("ScooterDAL.Entities.Payment", "TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScooterDAL.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScooterDAL.Entities.Trip", b =>
                {
                    b.HasOne("ScooterDAL.Entities.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScooterDAL.Entities.Vehicle", "Vehicle")
                        .WithMany("Trips")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ScooterDAL.Entities.Trip", b =>
                {
                    b.Navigation("Feedback")
                        .IsRequired();

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("ScooterDAL.Entities.User", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("ScooterDAL.Entities.Vehicle", b =>
                {
                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
